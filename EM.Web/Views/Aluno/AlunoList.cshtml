@model IEnumerable<EM.Domain.Models.Aluno>
@using EM.Domain.Models
@using EM.Domain.Utilitarios

<h1>Lista de Alunos</h1>

<a href="@Url.Action("AlunoCreate", "Aluno")" class="btn btn-primary mb-3">Cadastrar Novo Aluno</a>

<!-- Formulário de Pesquisa -->
<form method="get" class="mb-3">
    <div class="row">
        <div class="col-md-6">
            <input type="text" class="form-control" name="search" value="@ViewBag.Search" placeholder="Pesquisar por nome ou matrícula..." />
        </div>
        <div class="col-md-3">
            <button type="submit" class="btn btn-primary">Pesquisar</button>
            <a href="@Url.Action("AlunoList")" class="btn btn-secondary">Limpar</a>
        </div>
    </div>
</form>

<div class="table-responsive">
    <table class="table table-bordered table-striped">
        <thead class="table-dark">
            <tr>
                <th class="text-center" style="min-width: 80px;">Matrícula</th>
                <th style="min-width: 200px;">Nome</th>
                <th class="text-center" style="min-width: 160px;">CPF</th>
                <th class="text-center" style="min-width: 80px;">Sexo</th>
                <th class="text-center" style="min-width: 140px;">Data Nasc.</th>
                <th class="text-center" style="min-width: 120px;">Idade</th>
                <th style="min-width: 150px;">Cidade</th>
                <th class="text-center" style="min-width: 140px;">Ações</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var aluno in Model)
        {
            <tr>
                <td class="text-center">@aluno.AlunoMatricula</td>
                <td style="text-align: left;">@aluno.AlunoNome</td>
                <td class="text-center">
                    @{
                        // Uso de método de extensão para formatar CPF
                        string cpfFormatado = aluno.AlunoCPF.FormatarCPF();
                    }
                    <span>@cpfFormatado</span>
                </td>
                <td class="text-center">
                    @{
                        // Demonstra conversão de tipos e uso de enum
                        var sexoEnum = Enum.TryParse<EnumeradorSexo>(aluno.AlunoSexo, out var sexo) ? sexo : EnumeradorSexo.Masculino;
                    }
                    @sexoEnum.ObterDescricao()
                </td>
                <td class="text-center">@aluno.AlunoNascimento.ToShortDateString()</td>
                <td class="text-center">
                    @{
                        // Uso do novo método de extensão para idade formatada
                        string idadeFormatada = aluno.ObterIdadeFormatada();
                    }
                    <span>@idadeFormatada</span>
                </td>
                <td>
                    @{
                        // Usa o dicionário de cidades do ViewBag
                        var cidades = ViewBag.Cidades as Dictionary<int, string>;
                        string nomeCidade = cidades != null && cidades.ContainsKey(aluno.AlunoCidaCodigo) 
                            ? cidades[aluno.AlunoCidaCodigo] 
                            : "Não encontrada";
                    }
                    @nomeCidade
                </td>
                <td class="text-center">
                    <a href="@Url.Action("AlunoEdit", new { AlunoMatricula = aluno.AlunoMatricula })" class="btn btn-sm btn-warning">Editar</a>
                    <a href="@Url.Action("AlunoDelete", new { AlunoMatricula = aluno.AlunoMatricula })" class="btn btn-sm btn-danger">Excluir</a>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>

@if (!Model.Any())
{
    <div class="alert alert-info">
        <i class="fas fa-info-circle"></i> Nenhum aluno encontrado.
    </div>
}
