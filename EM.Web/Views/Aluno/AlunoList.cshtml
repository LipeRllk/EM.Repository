@model IEnumerable<EM.Domain.Models.Aluno>
@using EM.Domain.Models
@using EM.Domain.Utilitarios

<h1>Lista de Alunos</h1>

<a href="@Url.Action("AlunoCreate", "Aluno")" class="btn btn-primary mb-3">Cadastrar Novo Aluno</a>

<!-- Formulário de Pesquisa -->
<form method="get" class="mb-3">
    <div class="row">
        <div class="col-md-6">
            <input type="text" class="form-control" name="search" value="@ViewBag.Search" placeholder="Pesquisar por nome ou matrícula..." />
        </div>
        <div class="col-md-3">
            <button type="submit" class="btn btn-primary">Pesquisar</button>
            <a href="@Url.Action("AlunoList")" class="btn btn-secondary">Limpar</a>
        </div>
    </div>
</form>

<table class="table table-bordered table-striped">
    <thead class="table-dark">
        <tr>
            <th>Matrícula</th>
            <th>Nome</th>
            <th>CPF</th>
            <th>Sexo</th>
            <th>Data de Nascimento</th>
            <th>Idade</th>
            <th>Cidade</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
    @foreach (var aluno in Model)
    {
        <tr>
            <td>@aluno.AlunoMatricula</td>
            <td style="text-align: left;">@aluno.AlunoNome</td>
            <td>
                @{
                    // Uso de método de extensão para formatar CPF
                    string cpfFormatado = aluno.AlunoCPF.FormatarCPF();
                }
                <span>@cpfFormatado</span>
            </td>
            <td>
                @{
                    // Demonstra conversão de tipos e uso de enum
                    var sexoEnum = Enum.TryParse<EnumeradorSexo>(aluno.AlunoSexo, out var sexo) ? sexo : EnumeradorSexo.Masculino;
                }
                @sexoEnum.ObterDescricao()
            </td>
            <td>@aluno.AlunoNascimento.ToShortDateString()</td>
            <td>
                @{
                    // Uso de método de extensão para calcular idade
                    var idade = aluno.ObterIdade();
                    var maiorIdade = aluno.EhMaiorDeIdade();
                }
                @idade anos @(maiorIdade ? "✓" : "⚠️")
            </td>
            <td>
                @{
                    // Usa o dicionário de cidades do ViewBag
                    var cidades = ViewBag.Cidades as Dictionary<int, string>;
                    string nomeCidade = cidades != null && cidades.ContainsKey(aluno.AlunoCidaCodigo) 
                        ? cidades[aluno.AlunoCidaCodigo] 
                        : "Não encontrada";
                }
                @nomeCidade
            </td>
            <td>
                <a href="@Url.Action("AlunoEdit", new { AlunoMatricula = aluno.AlunoMatricula })" class="btn btn-sm btn-warning">Editar</a>
                <a href="@Url.Action("AlunoDelete", new { AlunoMatricula = aluno.AlunoMatricula })" class="btn btn-sm btn-danger">Excluir</a>
            </td>
        </tr>
    }
    </tbody>
</table>

@if (!Model.Any())
{
    <div class="alert alert-info">
        <i class="fas fa-info-circle"></i> Nenhum aluno encontrado.
    </div>
}
